@compute(CompileFor.deviceOnly) module dcompute.std.opencl.image;

import ldc.dcompute;
//separate module for opaque image type because the backend requires it
public import ldc.opencl;

template Image(int dim)
{
    static if (dim == 1)
        alias Image = GlobalPointer!image1d_rw_t;
    else static if (dim == 2)
        alias Image = GlobalPointer!image2d_rw_t;
    else static if (dim == 3)
        alias Image = GlobalPointer!image3d_rw_t;
}
template ReadOnlyImage(int dim)
{
    static if (dim == 1)
        alias ReadOnlyImage = GlobalPointer!image1d_ro_t;
    else static if (dim == 2)
        alias ReadOnlyImage = GlobalPointer!image2d_ro_t;
    else static if (dim == 3)
        alias ReadOnlyImage = GlobalPointer!image3d_ro_t;
}
template WriteOnlyImage(int dim)
{
    static if (dim == 1)
        alias WriteOnlyImage = GlobalPointer!image1d_wo_t;
    else static if (dim == 2)
        alias WriteOnlyImage = GlobalPointer!image2d_wo_t;
    else static if (dim == 3)
        alias WriteOnlyImage = GlobalPointer!image3d_wo_t;
}
/* Sampler
    A type used to control how elements of an image object are read by read_image
    Sampler arguments to read_image must be literals.
Coordinate normalisation
    CLK_NORMALIZED_COORDS_TRUE,
    CLK_NORMALIZED_COORDS_FALSE
Addressing mode
    CLK_ADDRESS_MIRRORED_REPEAT requires CLK_NORMALIZED_COORDS_TRUE
        Flip the image coordinate at every integer junction.
        If normalized coordinates are not used, this addressing mode may
        generate image coordinates that are undefined.
        Example: cba|abcd|dcb.
    CLK_ADDRESS_REPEAT requires CLK_NORMALIZED_COORDS_TRUE
        out-of-range image coordinates are wrapped to the valid range.
        If normalized coordinates are not used, this addressing mode may
        generate image coordinates that are undefined.
        Example: bcd|abcd|abc.
    CLK_ADDRESS_CLAMP_TO_EDGE
        out-of-range image coordinates are clamped to the extent.
        Example: aaa|abcd|ddd.
    CLK_ADDRESS_CLAMP
        out-of-range image coordinates will return a border color.
        This is similar to the GL_ADDRESS_CLAMP_TO_BORDER addressing mode.
        Example: 000|abcd|000.
    CLK_ADDRESS_NONE -
        for this addressing mode the programmer guarantees that the image
        coordinates used to sample elements of the image refer to a location
        inside the image; otherwise the results are undefined.
    For 1D and 2D image arrays, the addressing mode applies only to the x and
    (x, y) coordinates. The addressing mode for the coordinate which specifies
    the array index is always CLK_ADDRESS_CLAMP_TO_EDGE
Filter mode
    CLK_FILTER_NEAREST
    CLK_FILTER_LINEAR
 */
enum SamplerAddressMode : int
{
    none = 0,
    mirroredRepeat = 0x10,
    repeat  = 0x20,
    clampToEdge = 0x30,
    clamp = 0x40,
}
enum SamplerFilterMode : int
{
    nearest = 0,
    linear = 0x100
}
int samplerInit(bool normalisedCoords, SamplerAddressMode am, SamplerFilterMode fm)()
{
    return cast(int)(coords | am | fm);
}

alias Sampler = SharedPointer!sampler_t;

pragma(mangle,"__translate_sampler_initializer")
    Sampler makeSampler(int);

// TODO: Image 1d array, Image 1d buffer, Image 2d array depth, Image 2d array
// Refer to https://github.com/KhronosGroup/SPIR-Tools/wiki/SPIR-2.0-built-in-functions#image-read-and-write-functions
// for the read/write mangles
// Alternately use https://godbolt.org with `-target spir -O0 -emit-llvm` and check the IR generated by clang

template read(T) if (is(T == float))
{
    // return type
    alias T4 = __vector(T[4]);

    pragma(mangle,"_Z11read_imagef11ocl_image1d11ocl_samplerf")
        T4 read(GlobalPointer!image1d_rw_t, Sampler, float);
    pragma(mangle,"_Z11read_imagef11ocl_image1d11ocl_sampleri")
        T4 read(GlobalPointer!image1d_rw_t, Sampler, int);

    pragma(mangle,"_Z11read_imagef14ocl_image1d_ro11ocl_samplerf")
        T4 read(GlobalPointer!image1d_ro_t, Sampler, float);
    pragma(mangle,"_Z11read_imagef14ocl_image1d_ro11ocl_sampleri")
        T4 read(GlobalPointer!image1d_ro_t, Sampler, int);

    pragma(mangle,"_Z11read_imagef11ocl_image2d11ocl_samplerDv2_f")
        T4 read(GlobalPointer!image2d_rw_t, Sampler, __vector(float[2]));
    pragma(mangle,"_Z11read_imagef11ocl_image2d11ocl_samplerDv2_i")
        T4 read(GlobalPointer!image2d_rw_t, Sampler, __vector(int[2]));

    pragma(mangle,"_Z11read_imagef14ocl_image2d_ro11ocl_samplerDv2_f")
        T4 read(GlobalPointer!image2d_ro_t, Sampler, __vector(float[2]));
    pragma(mangle,"_Z11read_imagef14ocl_image2d_ro11ocl_samplerDv2_i")
        T4 read(GlobalPointer!image2d_ro_t, Sampler, __vector(int[2]));

    pragma(mangle,"_Z11read_imagef11ocl_image3d11ocl_samplerDv4_f")
        T4 read(GlobalPointer!image3d_rw_t, Sampler, __vector(float[4]));
    pragma(mangle,"_Z11read_imagef11ocl_image3d11ocl_samplerDv4_i")
        T4 read(GlobalPointer!image3d_rw_t, Sampler, __vector(int[4]));

    pragma(mangle,"_Z11read_imagef14ocl_image3d_ro11ocl_samplerDv4_f")
        T4 read(GlobalPointer!image3d_ro_t, Sampler, __vector(float[4]));
    pragma(mangle,"_Z11read_imagef14ocl_image3d_ro11ocl_samplerDv4_i")
        T4 read(GlobalPointer!image3d_ro_t, Sampler, __vector(int[4]));
}

template read(T) if (is(T == int))
{
    // return type
    alias T4 = __vector(T[4]);
    pragma(mangle,"_Z11read_imagei11ocl_image1d11ocl_samplerf")
        T4 read(GlobalPointer!image1d_rw_t, Sampler, float);
    pragma(mangle,"_Z11read_imagei11ocl_image1d11ocl_sampleri")
        T4 read(GlobalPointer!image1d_rw_t, Sampler, int);
    
    pragma(mangle,"_Z11read_imagei14ocl_image1d_ro11ocl_samplerf")
        T4 read(GlobalPointer!image1d_ro_t, Sampler, float);
    pragma(mangle,"_Z11read_imagei14ocl_image1d_ro11ocl_sampleri")
        T4 read(GlobalPointer!image1d_ro_t, Sampler, int);

    pragma(mangle,"_Z11read_imagef11ocl_image2d11ocl_samplerDv2_f")
        T4 read(GlobalPointer!image2d_rw_t, Sampler, __vector(float[2]));
    pragma(mangle,"_Z11read_imagef11ocl_image2d11ocl_samplerDv2_i")
        T4 read(GlobalPointer!image2d_rw_t, Sampler, __vector(int[2]));

    pragma(mangle,"_Z11read_imagef14ocl_image2d_ro11ocl_samplerDv2_f")
        T4 read(GlobalPointer!image2d_ro_t, Sampler, __vector(float[2]));
    pragma(mangle,"_Z11read_imagef14ocl_image2d_ro11ocl_samplerDv2_i")
        T4 read(GlobalPointer!image2d_ro_t, Sampler, __vector(int[2]));

    pragma(mangle,"_Z11read_imagef11ocl_image3d11ocl_samplerDv4_f")
        T4 read(GlobalPointer!image3d_rw_t, Sampler, __vector(float[4]));
    pragma(mangle,"_Z11read_imagef11ocl_image3d11ocl_samplerDv4_i")
        T4 read(GlobalPointer!image3d_rw_t, Sampler, __vector(int[4]));

    pragma(mangle,"_Z11read_imagef14ocl_image3d_ro11ocl_samplerDv4_f")
        T4 read(GlobalPointer!image3d_ro_t, Sampler, __vector(float[4]));
    pragma(mangle,"_Z11read_imagef14ocl_image3d_ro11ocl_samplerDv4_i")
        T4 read(GlobalPointer!image3d_ro_t, Sampler, __vector(int[4]));
}

template read(T) if (is(T == uint))
{
    // return type
    alias T4 = __vector(T[4]);
    pragma(mangle,"_Z12read_imageui11ocl_image1d11ocl_samplerf")
        T4 read(GlobalPointer!image1d_rw_t, Sampler, float);
    pragma(mangle,"_Z12read_imageui11ocl_image1d11ocl_sampleri")
        T4 read(GlobalPointer!image1d_rw_t, Sampler, int);
    pragma(mangle,"_Z12read_imageui14ocl_image1d_ro11ocl_samplerf")
        T4 read(GlobalPointer!image1d_ro_t, Sampler, float);
    pragma(mangle,"_Z12read_imageui14ocl_image1d_ro11ocl_sampleri")
        T4 read(GlobalPointer!image1d_ro_t, Sampler, int);

    pragma(mangle,"_Z11read_imagef11ocl_image2d11ocl_samplerDv2_f")
        T4 read(GlobalPointer!image2d_rw_t, Sampler, __vector(float[2]));
    pragma(mangle,"_Z11read_imagef11ocl_image2d11ocl_samplerDv2_i")
        T4 read(GlobalPointer!image2d_rw_t, Sampler, __vector(int[2]));
    pragma(mangle,"_Z11read_imagef14ocl_image2d_ro11ocl_samplerDv2_f")
        T4 read(GlobalPointer!image2d_ro_t, Sampler, __vector(float[2]));
    pragma(mangle,"_Z11read_imagef14ocl_image2d_ro11ocl_samplerDv2_i")
        T4 read(GlobalPointer!image2d_ro_t, Sampler, __vector(int[2]));

    pragma(mangle,"_Z11read_imagef11ocl_image3d11ocl_samplerDv4_f")
        T4 read(GlobalPointer!image3d_rw_t, Sampler, __vector(float[4]));
    pragma(mangle,"_Z11read_imagef11ocl_image3d11ocl_samplerDv4_i")
        T4 read(GlobalPointer!image3d_rw_t, Sampler, __vector(int[4]));
    pragma(mangle,"_Z11read_imagef14ocl_image3d_ro11ocl_samplerDv4_f")
        T4 read(GlobalPointer!image3d_ro_t, Sampler, __vector(float[4]));
    pragma(mangle,"_Z11read_imagef14ocl_image3d_ro11ocl_samplerDv4_i")
        T4 read(GlobalPointer!image3d_ro_t, Sampler, __vector(int[4]));
}

template write(I) if (is(I==GlobalPointer!image1d_rw_t))
{
    pragma(mangle,"_Z12write_imagef11ocl_image1diDv4_f")
        void write(I,int,__vector(float[4]));
    pragma(mangle,"_Z12write_imagef11ocl_image1diDv4_i")
        void write(I,int,__vector(int[4]));
    pragma(mangle,"_Z13write_imageui11ocl_image1diDv4_j")
        void write(I,int,__vector(uint[4]));
}
template write(I) if (is(I==GlobalPointer!image1d_wo_t))
{
    pragma(mangle,"_Z12write_imagef14ocl_image1d_woiDv4_f")
        void write(I,int,__vector(float[4]));
    pragma(mangle,"_Z12write_imagef14ocl_image1d_woiDv4_i")
        void write(I,int,__vector(int[4]));
    pragma(mangle,"_Z13write_imageui14ocl_image1d_woiDv4_j")
        void write(I,int,__vector(uint[4]));
}

template write(I) if (is(I==GlobalPointer!image2d_rw_t))
{
    pragma(mangle,"_Z12write_imagef11ocl_image2dDv2_iDv4_f")
        void write(I, __vector(int[2]), __vector(float[4]));
    pragma(mangle,"_Z12write_imagei11ocl_image2dDv2_iDv4_i")
        void write(I, __vector(int[2]), __vector(int[4]));
    pragma(mangle,"_Z13write_imageui11ocl_image2dDv2_iDv4_j")
        void write(I, __vector(int[2]), __vector(uint[4]));
}
template write(I) if (is(I==GlobalPointer!image2d_wo_t))
{
    pragma(mangle,"_Z12write_imagef14ocl_image2d_woDv2_iDv4_f")
        void write(I, __vector(int[2]), __vector(float[4]));
    pragma(mangle,"_Z12write_imagei14ocl_image2d_woDv2_iDv4_i")
        void write(I, __vector(int[2]), __vector(int[4]));
    pragma(mangle,"_Z13write_imageui14ocl_image2d_woDv2_iDv4_j")
        void write(I, __vector(int[2]), __vector(uint[4]));
}

template write(I) if (is(I==GlobalPointer!image3d_rw_t))
{
    pragma(mangle,"_Z12write_imagef11ocl_image3dDv4_iDv4_f")
        void write(I,__vector(int[4]),__vector(float[4]));
    pragma(mangle,"_Z12write_imagei11ocl_image3dDv4_iDv4_i")
        void write(I,__vector(int[4]),__vector(int[4]));
    pragma(mangle,"_Z13write_imageui11ocl_image3dDv4_iDv4_j")
        void write(I,__vector(int[4]),__vector(uint[4]));
}
template write(I) if (is(I==GlobalPointer!image3d_wo_t))
{
    pragma(mangle,"_Z12write_imagef14ocl_image3d_woDv4_iDv4_f")
        void write(I, __vector(int[4]), __vector(float[4]));
    pragma(mangle,"_Z12write_imagei14ocl_image3d_woDv4_iDv4_i")
        void write(I, __vector(int[4]), __vector(int[4]));
    pragma(mangle,"_Z13write_imageui14ocl_image3d_woDv4_iDv4_j")
        void write(I, __vector(int[4]), __vector(uint[4]));
}
